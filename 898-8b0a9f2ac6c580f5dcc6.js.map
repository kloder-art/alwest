{"version":3,"file":"898-8b0a9f2ac6c580f5dcc6.js","mappings":"uLAAqMA,G,gBAAE,CAAC,QAAQ,UAAU,YAAY,WAAW,iBAAiB,MAAM,eAAe,WAAW,iBAAiB,kBAAkB,cAAa,SAASC,EAAEA,EAAEC,EAAEC,EAAEC,GAAG,IAAIC,EAAEJ,EAAEK,MAAMC,EAAEN,EAAEO,QAAQC,EAAER,EAAES,UAAUC,EAAEV,EAAEW,SAASC,EAAEZ,EAAEa,eAAeC,EAAEd,EAAEe,IAAIC,EAAEhB,EAAEiB,aAAaC,EAAElB,EAAEmB,SAASC,OAAE,IAASF,EAAE,GAAGA,EAAEG,EAAErB,EAAEsB,eAAeC,EAAEvB,EAAEwB,gBAAgBC,EAAEzB,EAAE,UAAU0B,OAAE,IAASD,EAAE,QAAQA,EAAE,GAAEE,EAAAA,EAAAA,GAAE3B,EAAED,GAAG,EAAEK,EAAE,MAAM,EAAEA,EAAE,OAAO,EAAEA,EAAE,OAAO,EAAEA,EAAE,OAAO,EAAEA,EAAE,YAAY,EAAEA,EAAEoB,gBAAgBI,EAAE,KAAK,UAAU,GAAGR,GAAES,EAAAA,EAAAA,GAAE,CAAC,UAAUH,EAAEJ,eAAeD,EAAEG,gBAAgBD,GAAGH,GAAG,IAAI,EAAEU,EAAAA,cAAgBC,EAAAA,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,GAAGD,EAAAA,cAAgBE,EAAAA,GAAEH,EAAAA,EAAAA,GAAE,IAAGI,EAAAA,EAAAA,GAAE,EAAEvB,EAAE,EAAE,EAAE,EAAE,EAAEgB,EAAEL,KAAKS,EAAAA,cAAgBI,EAAAA,GAAEL,EAAAA,EAAAA,GAAE,GAAG,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,UAAUb,IAAGmB,EAAAA,EAAAA,GAAE3B,EAAEE,EAAE,EAAEJ,EAAEM,EAAEgB,EAAEd,EAAEM,MAAM,OAAOnB,EAAE,UAAUmC,EAAAA,YAAclC,EAAE,UAAUA,EAAE,QAAQkC,EAAAA,WAAanC,EAAE,UAAUC,EAAE,QAAQ,OAAO,MAAMA,EAAE,SAASC,EAAE,QAAQiC,EAAAA,OAASA,EAAAA,SAAW,EAAEnC,EAAE,SAASC,EAAE,SAAQ,IAAK,WAAWD,EAAE,UAAUmC,EAAAA,WAAalC,EAAE,QAAQ,OAAO,MAAMkC,EAAAA,OAAS,KAAKnC,EAAE,SAAU,CAAC,C","sources":["webpack://alwest/../src/components/lazy-hydrate.tsx"],"sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport { getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>,\n  forceHydrate: MutableRefObject<boolean>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  const cacheKey = JSON.stringify(images)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor,\n          objectFit,\n          objectPosition\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  if (root.current) {\n    // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n    // @ts-ignore react 18 typings\n    if (ReactDOM.createRoot) {\n      if (!hydrated.current) {\n        // @ts-ignore react 18 typings\n        hydrated.current = ReactDOM.createRoot(root.current)\n      }\n\n      // @ts-ignore react 18 typings\n      hydrated.current.render(component)\n    } else {\n      const doRender =\n        hydrated.current || forceHydrate.current\n          ? ReactDOM.render\n          : ReactDOM.hydrate\n      doRender(component, root.current)\n      hydrated.current = true\n    }\n  }\n\n  return (): void => {\n    if (root.current) {\n      // @ts-ignore react 18 typings\n      if (ReactDOM.createRoot) {\n        // @ts-ignore react 18 typings\n        hydrated.current.render(null)\n      } else {\n        ReactDOM.render(null as unknown as ReactElement, root.current)\n      }\n    }\n  }\n}\n"],"names":["objectFit","props","toggleIsLoaded","width","height","imgStyle","layout","images","placeholder","wrapperBackgroundColor","cacheKey","JSON","stringify","component","React","LayoutWrapper","Placeholder","image","getPlaceholderProps","MainImage","className","getMainProps","current","ReactDOM","createRoot","render","hydrate","isLoading","root","ref","forceHydrate","objectPosition","loading","isLoaded","hydrated","imgClassName","v","backgroundColor"],"sourceRoot":""}