{"version":3,"sources":["webpack:///./src/components/films/Item.jsx","webpack:///./src/components/films/Films.jsx","webpack:///./src/templates/staff.js","webpack:///./src/components/Meta.jsx"],"names":["StyledFilmItem","styled","div","FilmItem","id","title","poster","to","fixed","childImageSharp","objectFit","objectPosition","alt","StyledFilms","Films","items","filter","x","map","Item","frontmatter","key","Staff","data","file","childMarkdownRemark","html","name","style","marginBottom","picture","dangerouslySetInnerHTML","__html","director","length","size","actor","locations","markers","query","children","Link","label","href","target","rel","fn","runtime","Math","floor","cmp","toLocaleString","StyledMeta","ul","Meta","result","idx"],"mappings":"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","file":"component---src-templates-staff-js-84921ae7a37808d33fcb.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'gatsby';\nimport Img from 'gatsby-image/withIEPolyfill';\n\nconst StyledFilmItem = styled.div`\n  border-radius: 0.5rem;\n  overflow: hidden;\n  height: 230px;\n`;\n\nconst FilmItem = ({ id, title, poster }) => (\n  <StyledFilmItem>\n    <Link to={`/film/${id}`}>\n      <Img\n        fixed={poster.childImageSharp.fixed}\n        objectFit={'cover'}\n        objectPosition={'50% 50%'}\n        alt={`\"${title}\" Poster`}\n      />\n    </Link>\n  </StyledFilmItem>\n);\n\nFilmItem.propTypes = {\n  id: PropTypes.string,\n  title: PropTypes.string,\n  poster: PropTypes.object,\n};\n\nexport default FilmItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledFilms = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  grid-gap: 1rem;\n  justify-items: center;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n`;\n\nconst Films = ({ items }) => (\n  <StyledFilms>\n    {items\n      .filter(x => !!x)\n      .map(x => (\n        <Item {...x.frontmatter} key={x.frontmatter.id} />\n      ))}\n  </StyledFilms>\n);\n\nFilms.propTypes = {\n  items: PropTypes.array,\n};\n\nexport default Films;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image/withIEPolyfill';\n\nimport Layout from '../components/Layout';\nimport Films from '../components/films/Films';\nimport Map from '../components/locations/Map';\nimport SEO from '../components/SEO';\nimport Meta from '../components/Meta';\nimport Container from '../components/Container';\n\nconst Staff = ({ data }) => {\n  const { frontmatter, html } = data.file.childMarkdownRemark;\n  return (\n    <Layout>\n      <SEO title={frontmatter.name} />\n      <Container>\n        <h2 style={{ marginBottom: 0 }}>{frontmatter.name}</h2>\n        <Meta frontmatter={frontmatter} />\n\n        <Img\n          fixed={frontmatter.picture.childImageSharp.fixed}\n          objectFit={'cover'}\n          objectPosition={'50% 50%'}\n          alt={frontmatter.name}\n          style={{ marginBottom: '1rem' }}\n        />\n\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n      </Container>\n\n      {frontmatter.director && frontmatter.director.length > 0 && (\n        <Container>\n          <h3>Director in</h3>\n          <Films size={'small'} items={frontmatter.director} />\n        </Container>\n      )}\n\n      {frontmatter.actor && frontmatter.actor.length > 0 && (\n        <Container>\n          <h3>Actor in</h3>\n          <Films size={'small'} items={frontmatter.actor} />\n        </Container>\n      )}\n\n      {frontmatter.locations && frontmatter.locations.length > 0 && (\n        <>\n          <Container>\n            <h3>Locations</h3>\n          </Container>\n          <Map markers={frontmatter.locations} />\n        </>\n      )}\n    </Layout>\n  );\n};\n\nStaff.propTypes = {\n  data: PropTypes.object,\n};\n\nexport default Staff;\n\nexport const query = graphql`\n  query($id: String!) {\n    file(childMarkdownRemark: { frontmatter: { id: { eq: $id } } }) {\n      childMarkdownRemark {\n        frontmatter {\n          id\n          name\n          born\n          imdb\n          picture {\n            childImageSharp {\n              fixed(width: 210, height: 320) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n          director {\n            frontmatter {\n              id\n              title\n              poster {\n                childImageSharp {\n                  fixed(width: 150, height: 230) {\n                    ...GatsbyImageSharpFixed\n                  }\n                }\n              }\n            }\n          }\n          actor {\n            frontmatter {\n              id\n              title\n              poster {\n                childImageSharp {\n                  fixed(width: 150, height: 230) {\n                    ...GatsbyImageSharpFixed\n                  }\n                }\n              }\n            }\n          }\n          locations {\n            frontmatter {\n              id\n              name\n              lat\n              lon\n            }\n            html\n          }\n        }\n        html\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst formatRuntime = runtime =>\n  runtime > 60\n    ? `${Math.floor(runtime / 60)}h. ${runtime % 60}m.`\n    : `${runtime}m`;\n\nconst Item = ({ children }) => <li>{children}</li>;\n\nconst Link = ({ children, label }) => (\n  <a href={children} target={'_blank'} rel={'noopener noreferrer'}>\n    {label}\n  </a>\n);\n\nconst items = [\n  { key: 'year' },\n  { key: 'runtime', fn: formatRuntime },\n  { key: 'imdb', label: 'IMDB', cmp: Link },\n  { key: 'spotify', label: 'BSO', cmp: Link },\n  { key: 'wikipedia', label: 'Wikipedia', cmp: Link },\n  { key: 'recaudation', fn: x => x.toLocaleString() },\n  { key: 'born' },\n];\n\nconst StyledMeta = styled.ul`\n  display: flex;\n  list-style: none;\n  margin: 0;\n  li {\n    margin-right: 0.5rem;\n  }\n`;\n\nconst Meta = ({ frontmatter }) => (\n  <StyledMeta>\n    {items\n      .filter(x => frontmatter[x.key])\n      .map(x => ({\n        ...x,\n        result: x.fn ? x.fn(frontmatter[x.key]) : frontmatter[x.key],\n      }))\n      .map((x, idx) => (\n        <Item key={idx}>\n          {x.cmp ? <x.cmp label={x.label}>{x.result}</x.cmp> : x.result}\n        </Item>\n      ))}\n  </StyledMeta>\n);\n\nMeta.propTypes = {\n  frontmatter: PropTypes.object,\n};\n\nLink.propTypes = {\n  children: PropTypes.node,\n  label: PropTypes.string,\n};\n\nItem.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Meta;\n"],"sourceRoot":""}